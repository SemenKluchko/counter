{"version":3,"sources":["components/Button/Button.jsx","components/Counter/Counter.jsx","components/App/App.js","reportWebVitals.js","index.js"],"names":["Button","props","onClick","onClickMultipleIncrease","increment","Counter","className","onClickIncrease","class","message","onClickReduce","onClickReset","App","useState","counter","setCounter","multipleIncreaseCounter","increaseValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAQeA,MARf,SAAgBC,GAGZ,OACQ,yBAAQC,QAHE,kBAAMD,EAAME,wBAAwBF,EAAMG,YAGpD,cAAgCH,EAAMG,c,MCYnCC,MAdf,SAAiBJ,GACb,OACE,sBAAKK,UAAU,oBAAf,UACI,qBAAKA,UAAU,eAAf,SAA8B,2CAC9B,sBAAKA,UAAU,kBAAf,UACE,wBAAQJ,QAASD,EAAMM,gBAAvB,eACA,sBAAMC,MAAM,kBAAZ,SAA+BP,EAAMQ,UACrC,wBAAQP,QAASD,EAAMS,cAAvB,kBAEF,wBAAQR,QAASD,EAAMU,aAAvB,uB,MCmBKC,MAzBf,WAAgB,IAAD,EACiBC,mBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,KAOPC,EAA0B,SAACC,GAAD,OAAmBF,EAAWD,EAAQG,IAEtE,OACE,sBAAKX,UAAU,MAAf,UACE,cAAC,EAAD,CACEC,gBATkB,kBAAMQ,EAAWD,EAAQ,IAU3CJ,cATgB,WACHK,EAAhBD,GAAW,EAAgBA,EAAsBA,EAAQ,IAStDH,aAZe,kBAAMI,EAAW,IAahCN,QAASK,IAEX,cAAC,EAAD,CAAQX,wBAAyBa,EAAyBZ,UAAW,IACrE,cAAC,EAAD,CAAQD,wBAAyBa,EAAyBZ,UAAW,KACrE,cAAC,EAAD,CAAQD,wBAAyBa,EAAyBZ,UAAW,MACrE,cAAC,EAAD,CAAQD,wBAAyBa,EAAyBZ,UAAW,UCb5Dc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.498c8f65.chunk.js","sourcesContent":["function Button(props) {\n  const handleClick = () => props.onClickMultipleIncrease(props.increment)\n       \n    return (\n            <button onClick={handleClick}>+{props.increment}</button>\n    );\n  }\n\nexport default Button;\n","import './Counter.css'\n\nfunction Counter(props) {\n    return (\n      <div className=\"counter-container\">\n          <div className=\"counter-text\"><h3>Counter</h3></div>\n          <div className=\"counter-wrapper\">\n            <button onClick={props.onClickIncrease}>+</button>\n            <span class=\"current-counter\">{props.message}</span>\n            <button onClick={props.onClickReduce}>-</button>\n          </div>\n          <button onClick={props.onClickReset}>Reset</button>\n      </div>\n    );\n  }\n\nexport default Counter;\n","import { useState } from 'react';\nimport Button from '../Button/Button';\nimport Counter from '../Counter/Counter';\nimport './App.css';\n\nfunction App() {\n  const [counter, setCounter] = useState(0);\n  const resetCounter = () => setCounter(0);\n  const increaseCounter = () => setCounter(counter+1);\n  const reduceCounter = () => {\n    (counter <= 0) ? setCounter(counter) : setCounter(counter-1);\n  };\n  const multipleIncreaseCounter = (increaseValue) => setCounter(counter+increaseValue);\n  \n  return (\n    <div className=\"App\">\n      <Counter \n        onClickIncrease={increaseCounter}\n        onClickReduce={reduceCounter}\n        onClickReset={resetCounter}\n        message={counter}\n      />\n      <Button onClickMultipleIncrease={multipleIncreaseCounter} increment={5}/>\n      <Button onClickMultipleIncrease={multipleIncreaseCounter} increment={10}/>\n      <Button onClickMultipleIncrease={multipleIncreaseCounter} increment={100}/>\n      <Button onClickMultipleIncrease={multipleIncreaseCounter} increment={500}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}